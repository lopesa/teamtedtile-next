import Head from "next/head";
import Image from "next/image";
import HomeSplash from "../components/homeSplash";

interface GalleryImagesResponse {
  data: GalleryImage[];
  meta: {
    pagination: {
      page: number;
      pageCount: number;
      pageSize: number;
      total: number;
    };
  };
}
interface GalleryImage {
  id: number;
  attributes: {
    Title: string;
    createdAt: string;
    description: string;
    image: {
      data: {
        id: number;
        attributes: {
          name: string;
          url: string;
          width: number;
          height: number;
        };
      };
    };
  };
}

const API_URL_BASE =
  process.env.NODE_ENV === "development"
    ? "http://localhost:1337"
    : "https://api.teamtedtile.com";

export default function Home({
  images,
  notFound,
}: {
  images: GalleryImage[];
  notFound: boolean;
}) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <HomeSplash />
        {notFound && <h1>Images Not Found</h1>}
        {!notFound && (
          <ul>
            <li>
              {images.length &&
                images.map((image: GalleryImage, index: number) => (
                  <Image
                    src={`${API_URL_BASE}${image.attributes.image.data.attributes.url}`}
                    key={index}
                    alt=""
                    width={image.attributes.image.data.attributes.width}
                    height={image.attributes.image.data.attributes.height}
                  />
                ))}
            </li>
          </ul>
        )}
      </main>
    </>
  );
}

export async function getStaticProps(): Promise<
  | {
      props: { images: GalleryImage[]; notFound: boolean };
    }
  | Error
> {
  // https://developer.mozilla.org/en-US/docs/Web/API/fetch
  const res = await fetch(
    `${API_URL_BASE}/api/gallery-images?populate=*`
  ).catch((e) => {});
  if (res && res.ok) {
    const json: GalleryImagesResponse = await res.json();
    return { props: { images: json.data, notFound: false } };
  } else {
    return { props: { images: [], notFound: true } };
  }
}
